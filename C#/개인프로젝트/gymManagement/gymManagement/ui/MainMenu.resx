<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="gymNewCus.TileImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        ogAAAABJRU5ErkJggg==
</value>
  </data>
</root>